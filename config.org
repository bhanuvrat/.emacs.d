#+TITLE: Emacs Configuration

* preamble

#+BEGIN_SRC emacs-lisp
  ;; Hide the startup message
  (setq inhibit-startup-message t)
  (setq tree-sitter-langs-dir "~/.emacs.d/source/tree-sitter-langs")
  (add-to-list 'load-path "~/.emacs.d/tree-sitter-grammars/libtree-sitter-heex.so")
  ;;(global-unset-key (kbd "M-m"))
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq make-backup-files nil
	auto-save-default nil
	create-lockfiles nil
	ring-bell-function 'ignore)
#+END_SRC

* colorize compilation buffer with ansi-term
#+begin_src elisp

(defun my-ansi-color-compilation-filter ()
  "Colorize from the compilation output buffer."
  (ansi-color-apply-on-region (point-min) (point-max)))

(add-hook 'compilation-filter-hook 'my-ansi-color-compilation-filter)
#+end_src


* use-package for package management

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC


* Packages
** magit
magit installation
#+BEGIN_SRC emacs-lisp

  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)
	   ("C-x C-g" . magit-status)))
#+END_SRC

** editorconfig
#+BEGIN_SRC emacs-lisp
  ;; (use-package editorconfig
  ;;   :ensure t
  ;;   :config
  ;;   (editorconfig-mode 1))
#+END_SRC

** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config

    )

  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (setq helm-split-window-in-side-p           nil ; open helm buffer inside current window, not occupy whole other window
	helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
	helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	helm-ff-file-name-history-use-recentf t
	helm-echo-input-in-header-line t
	helm-split-window-default-side 'below
	helm-window-prefer-horizontal-split nil)
#+END_SRC

** programming modes
#+BEGIN_SRC emacs-lisp

  (setq treesit-language-source-alist
	'((bash "https://github.com/tree-sitter/tree-sitter-bash")
	  (cmake "https://github.com/uyha/tree-sitter-cmake")
	  (css "https://github.com/tree-sitter/tree-sitter-css")
	  (elisp "https://github.com/Wilfred/tree-sitter-elisp")
	  (go "https://github.com/tree-sitter/tree-sitter-go")
	  (html "https://github.com/tree-sitter/tree-sitter-html")
	  (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	  (json "https://github.com/tree-sitter/tree-sitter-json")
	  (make "https://github.com/alemuller/tree-sitter-make")
	  (markdown "https://github.com/ikatyang/tree-sitter-markdown")
	  (python "https://github.com/tree-sitter/tree-sitter-python")
	  (toml "https://github.com/tree-sitter/tree-sitter-toml")
	  (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
	  (yaml "https://github.com/ikatyang/tree-sitter-yaml")
	  (heex "https://github.com/phoenixframework/tree-sitter-heex.git")
	  (elixir "git@github.com:elixir-lang/tree-sitter-elixir.git")
	  ))

  (use-package heex-ts-mode
    :mode "\\.heex\\'"
    :config
    (add-hook 'heex-ts-mode-hook #'setup-heex-ts-mode))

  (use-package elixir-mode
    :ensure t)
  (defun setup-heex-ts-mode ()
    (setq-local company-backends '(company-capf)))

  (use-package tree-sitter-langs
    :ensure t)

  (require 'elixir-mode)
  (add-hook 'elixir-mode-hook 'hs-minor-mode)

  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    (require 'tree-sitter-langs)
    ;;(add-to-list 'tree-sitter-major-mode-language-alist '(heex-mode . "/Users/anuvrat/.emacs.d/elpa/tree-sitter-langs-20240512.2226/bin/heex.dylib"))
    (add-to-list 'tree-sitter-major-mode-language-alist '(elixir-mode . heex))
    (add-hook 'elixir-mode-hook #'tree-sitter-mode)
    (add-hook 'elixir-mode-hook #'tree-sitter-hl-mode))

  (global-set-key (kbd "C-c C-o") 'hs-toggle-hiding)

  (defun my-elixir-indent-region (start end)
    (interactive "r")
    (shell-command-on-region start end "mix format -" nil t))

  (add-hook 'elixir-mode-hook
	    (lambda ()
	      (local-set-key (kbd "C-M-\\") 'my-elixir-indent-region)))
  (add-hook 'elixir-mode-hook
	    (lambda ()
	      (message "Elixir mode hook triggered!")))

#+END_SRC

** rss / atom elfeed

#+BEGIN_SRC elisp


  ;; Configure Elfeed
  (use-package elfeed
    :custom
    (elfeed-db-directory
     (expand-file-name "elfeed" user-emacs-directory))
    (elfeed-show-entry-switch 'display-buffer)
    :bind
    ("C-c w e" . elfeed))

#+END_SRC

** multiple-cursors
** yasnippet
We have installed it with:

#+BEGIN_SRC 
$ cd ~/.emacs.d/plugins
$ git clone --recursive https://github.com/joaotavora/yasnippet
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path
	       "~/.emacs.d/plugins/yasnippet")
  (require 'yasnippet)
  (yas-global-mode 0)
#+END_SRC

#+RESULTS:

** shortucts with general and which-key
#+BEGIN_SRC elisp
  (use-package general
    :ensure t)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode )
    (which-key-setup-side-window-bottom)
    (setq which-key-idle-delay 0.3)
    (setq which-key-prefix-prefix "M-m"))
  (general-create-definer my-leader-def
    :prefix "M-m"
    :non-normal-prefix "M-m")

  (my-leader-def
    :keymaps 'override
    "f f" 'find-file
    "b b" 'switch-to-buffer
    "p p" 'project-switch-project
    "s s" 'save-buffer
    "p t" 'treemacs-projectile
    )

  (which-key-add-key-based-replacements "M-m" "Leader")
#+END_SRC
* IDE
** perspective
#+BEGIN_SRC elisp
  ;; (use-package persp-mode
  ;;   :ensure t
  ;;   :config
  ;;   (persp-mode))
  ;; (use-package perspective
  ;;   :ensure t
  ;;   :init
  ;;   (persp-mode))
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
    :init
    (persp-mode))
#+END_SRC

** popwin
#+BEGIN_SRC elisp
  (use-package popwin
   :ensure t
   )
  
  (popwin-mode 1)
  (setq display-buffer-function 'popwin:display-buffer)
  (push '("^\*helm .+\*$" :regexp t) popwin:special-display-config)
  (push '("^\*helm-.+\*$" :regexp t) popwin:special-display-config)
#+END_SRC


** treemacs

#+BEGIN_SRC elisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   'simple
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-find-workspace-method           'find-for-file-or-pick-first
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	    treemacs-hide-dot-git-directory          t
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask" "/deps")
	    treemacs-project-follow-into-home        nil
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-select-when-already-in-treemacs 'move-back
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                1.5
	    treemacs-text-scale                      nil
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-wide-toggle-width               70
	    treemacs-width                           35
	    treemacs-width-increment                 1
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t d"   . treemacs-select-directory)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  ;; (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  ;;   :after (treemacs)
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Tabs))

#+END_SRC

** lsp

#+BEGIN_SRC elisp

  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	   (XXX-mode . lsp)
	   ;; if you want which-key integration
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are helm user
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; if you are ivy user
  ;;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; optional if you want which-key integration
  (use-package which-key
    :config
    (which-key-mode))


#+END_SRC


** projectile
#+BEGIN_SRC elisp
  (use-package helm-projectile
    :ensure t
    )

  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)

    (setq projectile-search-tool 'rg)
    :bind (:map projectile-mode-map
		("s-p" . projectile-command-map)
		("C-c p" . projectile-command-map)

		))
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)


#+END_SRC



* themes
** doom themes
#+BEGIN_SRC elisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t))
#+END_SRC



* footer

#+BEGIN_SRC emacs-lisp
  ;; magit
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages '(use-package)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+END_SRC
