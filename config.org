#+TITLE: Emacs Configuration

* preamble

#+BEGIN_SRC emacs-lisp
  ;; Hide the startup message
  (setq inhibit-startup-message t)
  (setq tree-sitter-langs-dir "~/.emacs.d/source/tree-sitter-langs")
  ;; (global-unset-key (kbd "M-m"))
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq make-backup-files nil
	auto-save-default nil
	create-lockfiles nil
	ring-bell-function 'ignore)
#+END_SRC

* colorize compilation buffer with ansi-term
#+begin_src elisp

  (defun my-ansi-color-compilation-filter ()
    "Colorize from the compilation output buffer."
    (ansi-color-apply-on-region (point-min) (point-max)))

  (add-hook 'compilation-filter-hook 'my-ansi-color-compilation-filter)
#+end_src


* use-package for package management

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC


* Packages
** magit
magit installation
#+BEGIN_SRC emacs-lisp

  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)
	   ("C-x C-g" . magit-status)))
#+END_SRC

** editorconfig
#+BEGIN_SRC emacs-lisp
  ;; (use-package editorconfig
  ;;   :ensure t
  ;;   :config
  ;;   (editorconfig-mode 1))
#+END_SRC

** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config

    )

  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (setq helm-split-window-in-side-p           nil ; open helm buffer inside current window, not occupy whole other window
	helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
	helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	helm-ff-file-name-history-use-recentf t
	helm-echo-input-in-header-line t
	helm-split-window-default-side 'below
	helm-window-prefer-horizontal-split nil)
#+END_SRC

** programming modes
#+BEGIN_SRC emacs-lisp


  (setq treesit-language-source-alist
	'((bash "https://github.com/tree-sitter/tree-sitter-bash")
	  (cmake "https://github.com/uyha/tree-sitter-cmake")
	  (css "https://github.com/tree-sitter/tree-sitter-css")
	  (elisp "https://github.com/Wilfred/tree-sitter-elisp")
	  (go "https://github.com/tree-sitter/tree-sitter-go")
	  (html "https://github.com/tree-sitter/tree-sitter-html")
	  (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	  (json "https://github.com/tree-sitter/tree-sitter-json")
	  (make "https://github.com/alemuller/tree-sitter-make")
	  (markdown "https://github.com/ikatyang/tree-sitter-markdown")
	  (python "https://github.com/tree-sitter/tree-sitter-python")
	  (toml "https://github.com/tree-sitter/tree-sitter-toml")
	  (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
	  (yaml "https://github.com/ikatyang/tree-sitter-yaml")
	  (heex "https://github.com/phoenixframework/tree-sitter-heex.git")
	  (elixir "git@github.com:elixir-lang/tree-sitter-elixir.git")
	  ))

  (use-package heex-ts-mode
    :mode "\\.heex\\'"
    :config
    (add-hook 'heex-ts-mode-hook #'setup-heex-ts-mode))

  (use-package elixir-ts-mode
    :ensure t
    :hook
    (
     (elixir-ts-mode . flycheck-mode)
     (elixir-ts-mode . smartparens-mode)
     (elixir-ts-mode . mix-minor-mode)
     (elixir-ts-mode . exunit-mode)
     )
    )


  ;; (use-package elixir-mode
  ;;   :ensure t)

  ;; (add-to-list 'tree-sitter-modes 'elixir-ts-mode)

  (defun setup-heex-ts-mode ()
    (setq-local company-backends '(company-capf)))

  (use-package tree-sitter-langs
    :ensure t)

  (require 'elixir-ts-mode)
  (add-hook 'elixir-ts-mode-hook 'hs-minor-mode)

  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    (require 'tree-sitter-langs)

    ;;(add-to-list 'tree-sitter-major-mode-language-alist '(heex-mode . "/Users/anuvrat/.emacs.d/elpa/tree-sitter-langs-20240512.2226/bin/heex.dylib"))
    (add-to-list 'tree-sitter-major-mode-language-alist '(elixir-ts-mode . heex))
    (add-hook 'elixir-ts-mode-hook #'tree-sitter-mode)
    (add-hook 'elixir-ts%-mode-hook #'tree-sitter-hl-mode))

  (global-set-key (kbd "C-c C-o") 'hs-toggle-hiding)

  (use-package web-mode
    :ensure t)

  (use-package polymode
    :mode ("\.ex$" . poly-elixir-web-mode)
    :config
    (define-hostmode poly-elixir-hostmode :mode 'elixir-mode)
    (define-innermode poly-liveview-expr-elixir-innermode
      :mode 'web-mode
      :head-matcher (rx line-start (* space) "~H" (= 3 (char "\"'")) line-end)
      :tail-matcher (rx line-start (* space) (= 3 (char "\"'")) line-end)
      :head-mode 'host
      :tail-mode 'host
      :allow-nested nil
      :keep-in-mode 'host
      :fallback-mode 'host)
    (define-polymode poly-elixir-web-mode
      :hostmode 'poly-elixir-hostmode
      :innermodes '(poly-liveview-expr-elixir-innermode))
    )
  (setq web-mode-engines-alist '(("elixir" . "\\.ex\\'")))
#+END_SRC

** rss / atom elfeed

#+BEGIN_SRC elisp

  ;; Configure Elfeed
  (use-package elfeed
    :custom
    (elfeed-db-directory
     (expand-file-name "elfeed" user-emacs-directory))
    (elfeed-show-entry-switch 'display-buffer)
    :bind
    ("C-c w e" . elfeed))

#+END_SRC

** multiple-cursors
** yasnippet
We have installed it with:

#+BEGIN_SRC 
$ cd ~/.emacs.d/plugins
$ git clone --recursive https://github.com/joaotavora/yasnippet
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path
	       "~/.emacs.d/plugins/yasnippet")
  (require 'yasnippet)
  (yas-global-mode 0)
#+END_SRC

#+RESULTS:

** shortucts with general and which-key
#+BEGIN_SRC elisp
  (use-package general
    :ensure t)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode )
    (which-key-setup-side-window-bottom)
    (setq which-key-idle-delay 0.3)
    (setq which-key-prefix-prefix "M-m"))
  (general-create-definer my-leader-def
    :prefix "M-m"
    :non-normal-prefix "M-m")

  (my-leader-def
    :keymaps 'override
    "f f" 'find-file
    "b b" 'switch-to-buffer
    "p p" 'project-switch-project
    "s s" 'save-buffer
    ;; "p t" 'treemacs-projectile
    )

  (which-key-add-key-based-replacements "M-m" "Leader")
#+END_SRC
* IDE
** perspective
#+BEGIN_SRC elisp
  ;; (use-package persp-mode
  ;;   :ensure t
  ;;   :config
  ;;   (persp-mode))
  ;; (use-package perspective
  ;;   :ensure t
  ;;   :init
  ;;   (persp-mode))
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
    :init
    (persp-mode))
#+END_SRC

** popwin
#+BEGIN_SRC elisp
  (use-package popwin
    :ensure t
    )

  (popwin-mode 1)
  (setq display-buffer-function 'popwin:display-buffer)
  (push '("^\*helm .+\*$" :regexp t) popwin:special-display-config)
  (push '("^\*helm-.+\*$" :regexp t) popwin:special-display-config)
#+END_SRC

** run mix format on save

#+begin_src elisp
  (defun format-elixir-buffer ()
    "Format the current buffer with `mix format`."
    (interactive)
    (when (eq major-mode 'elixir-mode)
      (let ((elixir-buffer (current-buffer)))
	(with-temp-buffer
	  (call-process-region (point-min) (point-max) "mix" nil t nil "format")
	  (with-current-buffer elixir-buffer
	    (replace-buffer-contents (current-buffer)))))))

  (add-hook 'before-save-hook 'format-elixir-buffer)
#+end_src


** lsp


** projectile
#+BEGIN_SRC elisp
  (use-package helm-projectile
    :ensure t
    )

  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)

    (setq projectile-search-tool 'rg)
    :bind (:map projectile-mode-map
		("s-p" . projectile-command-map)
		("C-c p" . projectile-command-map)

		))
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)


#+END_SRC



* themes
** doom themes
#+BEGIN_SRC elisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t))
#+END_SRC


* org babel

#+BEGIN_SRC elisp

  (use-package ob-elixir)

    ;; active Babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (emacs-lisp . t)
       (python . t)
       (elixir . t)
       (shell . t)
       ))

#+END_SRC

* footer

#+BEGIN_SRC emacs-lisp
  ;; magit
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages '(use-package)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+END_SRC
